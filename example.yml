# The number of threads that run in parallel.
# If 0 is specified or omitted, as many threads as possible will be used, which may cause your computer to lag.
threads: 4

rendering:
  # path of output image, default to `output.png`
  output: output.png
  # size of output image
  size: [240, 180]
  # sample per pixel
  spp: 100
  # the number of sample in supersampling anti-aliasing, in square root
  ssaa: 2
  # the number of times that the color of a pixel will be clamped
  rounds: 1
  # minimum number of bounces
  bounces: 4
  # the fixed probability for RR (Russian Roulette) at the end, 0 for disabling RR
  rr: 0.9
  # the number of bounces after which the fixed probability is used for RR
  rr_bounces: 20

camera:
  # position of camera
  origin: [0, 50, 225]
  # vector from camera to the position that will be in the center of screen
  direction: [0, 0, -1]
  # field of view along y-axis, in degree
  fov: 45

# The following list describes objects in the scene.
#
# Three types of object are supported: mesh, sphere and plane.
# Though anything can be expressed as a mesh, the other two are provided as simple and faster alternatives.
#
# For mesh type:
# A model file must be specified as `model` field.
# Only PLY format is supported.
# Vertex data must be in `vertex` element.
# Vertex indices must be in `vertex_indices` element, must be a list of size 3.
#
# A texture image file can be specified as `texture` field.
# The image format can be PNG, JPEG and BMP.
# If specified, the vertex element must have properties `u` and `v`, as texture coordinates.
#
# For sphere type:
# The radius and the center point must be specified as `radius` and `center` fields, respectively.
#
# For plane type:
# The normal vector and a control point must be specified as `normal` and `point` fields, respectively.
#
# Several fields are applicable for all types.
# For a field supposed to be a triple, you can simply specify one number `s` to denote `[s, s, s]`.
#
# A color is denoted as a triple `[r, g, b]`.
# The components in normal color are between 0.0 and 1.0, but you can also specify bigger values.
# color: object color, ignored if texture is supplied
# emission: light color for lighting objects, default to `0`
#
# The material is one of diffuse, specular and refractive.
# The value is corresponding string.
# For refractive type, you can specify an additional refractive index `n` as `[refractive, n]`.
# material: object material, default to `diffuse`
#
# The transform is applied in the order of `scale` -> `rotate` -> `translate`.
# scale: a vector denoting the scale for each dimension
# rotate: a `[angle, axis]` pair denoting the rotation,
#   where `angle` is the rotation angle in degree and `axis` is a vector to denote the rotation axis.
# translate: a vector denoting the translation for each dimension

scene:
  - {type: plane, normal: [+1, 0, 0], point: [-50, 0, 0], color: [0.75, 0.25, 0.25]}
  - {type: plane, normal: [-1, 0, 0], point: [+50, 0, 0], color: [0.25, 0.25, 0.75]}
  - {type: plane, normal: [0, 0, +1], point: [0, 0, 0], color: 0.75}
  - {type: plane, normal: [0, 0, -1], point: [0, 0, 225], color: [0.25, 0.75, 0.25]}
  - {type: plane, normal: [0, +1, 0], point: [0, 0, 0], color: 0.75}
  - {type: plane, normal: [0, -1, 0], point: [0, 100, 0], color: 0.75}
  - {type: sphere, radius: 16, center: [-25, 16, 25], color: 1, material: specular}
  - {type: sphere, radius: 12, center: [+25, 12, 50], color: 1, material: refractive}
  - {type: mesh, model: models/stanford/bun_zipper.ply, scale: 150, translate: [27, 19.0519, 48], color: 1, material: refractive, emission: [0.208, 0.172, 0.054]}
